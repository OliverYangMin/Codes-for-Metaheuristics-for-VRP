TSP问题是VRP的特例，也就是所有客户点的总需求，小于一辆车的capacity，或者是有一辆容量无限大的vehicle，总而言之就是容量限制不再束缚我们的求解。

这几天发现自己对路径问题的理解存在偏差，所以反过头来把TSP问题先搞定，这里所编写的包括DP求解TSP，2-opt求解TSP，在VRP的求解过程中一样可以调用。

## 动态规划 DP
动态规划(dynamic programming)是运筹学的一个分支，是求解决策过程(decision process)最优化的数学方法。20世纪50年代初美国数学家R.E.Bellm
an等人在研究多阶段决策过程(multistep decision process)的优化问题时，提出了著名的最优化原理(principle of optimality)，把多阶段
过程转化为一系列单阶段问题，利用各阶段之间的关系，逐个求解，创立了解决这类过程优化问题的新方法——动态规划。

如何理解这动态规划呢？在算法设计里，有很多思想，例如减而治之，分而治之，而我们发现，TSP问题的解，具有子结构。假设现在面临一个只有5个城市的问题，5个城市的
最优解，一定是4个城市解的延申拓展。

3个城市
d(i,j) 
i 是当前点集   使用状态压缩 111 110 100 011 001 000 010 110 共8个状态，3个选项，每个选项只有是否两个选择。就是2^N次方个状态   

lua里的二进制操作
require 'bit'
左移=*2      bit.lshift(i, j) <<
右移=/2      bit.rshift(i, j) >>
and         bit.band(i, j)    &
or          bit.bor(i, j)     |
not         bit.bnot(i, j)    ~
xor         bit.xor(i, j)     ^

检验当前状态i是否包含j城市，只需要 i&1<<j 若结果为0 则不包含，否则包含了这个城市

然后新加入某城市只需要     i|1<<j

整个循环逻辑是
for i=2,M-1 do
  for j=2,N do
    if 包含城市j continue
    if 出发城市不为1 continue  也就是不包含起点城市的不考虑
    for k=1,N do   遍历状态城市集合中的所有城市，比较其到新城市j 的距离
       if k在状态集中
          dp[i+j][j]  = math.min(dp[i+j][j], dp[i][k]+dis[k][j])
    end 
  end 
end 

这里的dp是记录【i】【j】i状态下，当前末尾点为j的值
其大小为M*N,初始值都为math.huge，但是对于状态00001，也就是只包含起点，且当前点位起点的【1】值为0

整个算法的时间复杂度为O(N^2 * 2^N)
空间复杂度为（2^N*N)
